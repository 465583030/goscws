PACKAGE DOCUMENTATION

package goscws
    import "."


CONSTANTS

const (
    SCWS_XDICT_XDB     = C.SCWS_XDICT_XDB     // 表示直接读取 xdb 文件
    SCWS_XDICT_MEM     = C.SCWS_XDICT_MEM     // 表示将 xdb 文件全部加载到内存中，以 XTree 结构存放，可用异或结合另外2个使用。
    SCWS_XDICT_TXT     = C.SCWS_XDICT_TXT     // 表示要读取的词典文件是文本格式，可以和后2项结合用
    SCWS_MULTI_SHORT   = C.SCWS_MULTI_SHORT   // 短词
    SCWS_MULTI_DUALITY = C.SCWS_MULTI_DUALITY // 二元（将相邻的2个单字组合成一个词）
    SCWS_MULTI_ZMAIN   = C.SCWS_MULTI_ZMAIN   // 重要单字
    SCWS_MULTI_ZALL    = C.SCWS_MULTI_ZALL    // 全部单字
)

TYPES

type GoScws struct {
    // contains filtered or unexported fields
}

func NewScws() *GoScws
    分配或初始化与 GoScws 系列操作的 `scws_st` 对象。

func (this *GoScws) AddDict(fPath string, mode int) error
    不会释放已加载的词典，若已经加载过该词典，则新加入的词典具有更高的优先权。

func (this *GoScws) DeleteScws()
    释放 GoScws 系列操作的 `scws_st` 对象及对象内容， 同时也会释放已经加载的词典和规则。

func (this *GoScws) ForkScws(gs *GoScws) *GoScws
    在已有 GoScws 对象上产生一个分支，可以独立用于某个协程分词, 以便共享内存词典、规则集，但它继承并共享父对象词典、
    规则集资源。同样需要调用 `DeleteScws()` 来释放对象。 在该分支对象上重设词典、规则集不会影响父对象及其它分支。

func (this *GoScws) GetMulti(param []int32) C.int
    返回需要的mode 例如 [SCWS_MULTI_SHORT, SCWS_MULTI_DUALITY, SCWS_MULTI_ZMAIN] 返回
    ret = SCWS_MULTI_SHORT | SCWS_MULTI_DUALITY | SCWS_MULTI_ZMAIN

func (this *GoScws) GetResult() *Result
    返回分词结果集 Result，无返回nil

func (this *GoScws) GetTops(others ...interface{}) *TopWord
    返回指定的关键词表统计集，系统会自动根据词语出现的次数及其 idf 值计算排名 参数 limit
    指定取回数据的最大条数，若传入值为0或负数，则自动重设为10 参数 attr 用来描述要排除或参与的统计词汇词性，多个词性之间用逗号隔开

func (this *GoScws) GetWords(attr []byte) *TopWord
    参数 attr 是一系列词性组成的字符串，各词性之间以半角的逗号隔开
    这表示返回的词性必须在列表中，如果以~开头，则表示取反，词性必须不在列表中，若为空则返回全部词 返回值
    成功返回符合要求词汇组成的TopWord，返回 nil。返回的词汇包含的键值参见 `GetResult()`

func (this *GoScws) HasWord(attr string) bool
    返回值 如果有返回 1 没有则返回 0 参数 attr 用来描述要排除或参与的统计词汇词性，多个词性之间用逗号隔开
    当以~开头时表示统计结果中不包含这些词性，否则表示必须包含，传入 nil 表示统计全部词性

func (this *GoScws) SendText(text []byte, len int) error
    这个函数应在 `GetResult()` 和 `GetTops()` `HasWord()` `GetWords` 之前调用,防止出错
    连续调用后会覆盖之前的设定；故不应在多次的 GetResult 循环中再调用 SendText() 以免出错。

func (this *GoScws) SetCharset(cs string)
    设定当前 scws 所使用的字符集, 缺省gbk

func (this *GoScws) SetDict(fPath string, mode int) error
    添加词典文件到当前 scws 对象 SCWS_XDICT_TXT 读取的词典为文本格式 SCWS_XDICT_XDB 直接读取xdb文件
    SCWS_XDICT_MEM 加载xdb文件直接到内存中 先释放已加载的所有词典，在加载指定的词典。

func (this *GoScws) SetDuality(yes int) error
    是否将闲散文字自动以二字分词法聚合 如果为 1 表示执行二分聚合，0 表示不处理，缺省为 0

func (this *GoScws) SetIgnore(yes int) error
    设定分词结果是否忽略标点符号 1 忽略 0 不忽略

func (this *GoScws) SetMulti(mode int) error
    是否针对长词符合切分 SCWS_MULTI_SHORT 短词 SCWS_MULTI_DUALITY 二元（将相邻的2个单字组合成一个词）
    SCWS_MULTI_ZMAIN 重要单字 SCWS_MULTI_ZALL 全部单字 例如 mode := SCWS_MULTI_SHORT |
    SCWS_MULTI_DUALITY | SCWS_MULTI_ZMAIN

func (this *GoScws) SetRule(fPath string) error
    设定规则集文件

type Result struct {
    Word []byte
    Idf  float32
    Attr []byte
}

type TopWord struct {
    Word   []byte
    Weight float32
    Times  int
    Attr   []byte
}

SUBDIRECTORIES

	pkg

